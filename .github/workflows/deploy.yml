name: Deploy Recipe Generator to AWS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install Flask python-dotenv google-generativeai pytest
        fi

    - name: Run tests
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ -v
        else
          echo "No tests directory found, skipping tests"
        fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        # Install Node.js tools for asset minification (optional)
        sudo npm install -g csso-cli terser

    - name: Run build script
      run: |
        chmod +x build.sh
        ./build.sh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lambda-package
        path: lambda.zip
        retention-days: 30

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: lambda-package

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install AWS CDK
      run: |
        npm install -g aws-cdk@latest
        pip install -r infrastructure/requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update deployment properties for dev
      run: |
        cat > deployment.properties << EOF
        AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION=${{ env.AWS_REGION }}
        DOMAIN_NAME=${{ secrets.DEV_DOMAIN_NAME }}
        SUBDOMAIN=recipe-dev
        FULL_DOMAIN=recipe-dev.${{ secrets.DEV_DOMAIN_NAME }}
        CERTIFICATE_ARN=${{ secrets.DEV_CERTIFICATE_ARN }}
        ENVIRONMENT=development
        PROJECT_NAME=recipe-generator-dev
        GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
        FLASK_SECRET=${{ secrets.FLASK_SECRET }}
        LAMBDA_MEMORY_SIZE=512
        LAMBDA_TIMEOUT=30
        LAMBDA_RUNTIME=python3.11
        ENABLE_WAF=true
        RATE_LIMIT_PER_5MIN=2000
        LOG_RETENTION_DAYS=7
        OWNER=${{ github.actor }}
        COST_CENTER=development
        EOF

    - name: Deploy CDK stack
      run: |
        cd infrastructure
        cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} || true
        cdk deploy --require-approval never --verbose

    - name: Run post-deployment tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        # Add any post-deployment tests here
        echo "Deployment completed successfully"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: lambda-package

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install AWS CDK
      run: |
        npm install -g aws-cdk@latest
        pip install -r infrastructure/requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update deployment properties for prod
      run: |
        cat > deployment.properties << EOF
        AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION=${{ env.AWS_REGION }}
        DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
        SUBDOMAIN=${{ secrets.SUBDOMAIN }}
        FULL_DOMAIN=${{ secrets.SUBDOMAIN }}.${{ secrets.DOMAIN_NAME }}
        CERTIFICATE_ARN=${{ secrets.CERTIFICATE_ARN }}
        ENVIRONMENT=production
        PROJECT_NAME=recipe-generator
        GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
        FLASK_SECRET=${{ secrets.FLASK_SECRET }}
        LAMBDA_MEMORY_SIZE=1024
        LAMBDA_TIMEOUT=30
        LAMBDA_RUNTIME=python3.11
        ENABLE_WAF=true
        RATE_LIMIT_PER_5MIN=5000
        LOG_RETENTION_DAYS=30
        OWNER=${{ github.actor }}
        COST_CENTER=production
        EOF

    - name: Deploy CDK stack
      run: |
        cd infrastructure
        cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} || true
        cdk deploy --require-approval never --verbose

    - name: Run post-deployment tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        # Add any post-deployment tests here
        echo "Production deployment completed successfully"

    - name: Notify deployment success
      if: success()
      run: |
        echo "ðŸŽ‰ Production deployment successful!"
        echo "Application is available at: https://${{ secrets.SUBDOMAIN }}.${{ secrets.DOMAIN_NAME }}"

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Delete artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          for (const artifact of artifacts.data.artifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          }